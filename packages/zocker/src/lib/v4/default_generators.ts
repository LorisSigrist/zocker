import { InstanceofGeneratorDefinition } from "./zocker.js";
import * as z from "zod/v4/core";

import {
	NumberGenerator,
	BigintGenerator,
	BooleanGenerator,
	DateGenerator,
	SymbolGenerator,
	OptionalGenerator,
	NullableGenerator,
	AnyGenerator,
	UnknownGenerator,
	ArrayGenerator,
	TupleGenerator,
	RecordGenerator,
	MapGenerator,
	SetGenerator,
	ObjectGenerator,
	UnionGenerator,
	EnumGenerator,
	DefaultGenerator,
	PromiseGenerator,
	LazyGenerator,
	IntersectionGenerator,
	ReadonlyGenerator,
	StringGenerator,
	CUIDGenerator,
	CUID2Generator,
	IPv4Generator,
	IPv6Generator,
	UUIDGenerator,
	E164Generator,
	EmailGenerator,
	ISODateGenerator,
	ISODateTimeGenerator,
	ISOTimeGenerator,
	ISODurationGenerator,
	NanoIDGenerator,
	ULIDGenerator,
	CIDRv4Generator,
	CIDRv6Generator,
	URLGenerator,
	PipeGenerator,
	EmojiGenerator,
	Base64Generator,
	Base64URLGenerator,
	GUIDGenerator,
	KSUIDGenerator
} from "./generators/index.js";

export const default_generators: InstanceofGeneratorDefinition<any>[] = [
	KSUIDGenerator,
	Base64Generator,
	Base64URLGenerator,
	EmojiGenerator,
	URLGenerator,
	CIDRv4Generator,
	CIDRv6Generator,
	ULIDGenerator,
	NanoIDGenerator,
	ISODateGenerator,
	ISODateTimeGenerator,
	ISOTimeGenerator,
	ISODurationGenerator,
	EmailGenerator,
	E164Generator,
	GUIDGenerator,
	UUIDGenerator,
	IPv4Generator,
	IPv6Generator,
	CUID2Generator,
	CUIDGenerator,
	StringGenerator,
	NumberGenerator,
	BigintGenerator,
	BooleanGenerator,
	DateGenerator,
	SymbolGenerator,
	OptionalGenerator,
	NullableGenerator,
	AnyGenerator,
	UnknownGenerator,
	PipeGenerator,
	ArrayGenerator,
	TupleGenerator,
	RecordGenerator,
	MapGenerator,
	SetGenerator,
	ObjectGenerator,
	UnionGenerator,
	EnumGenerator,
	DefaultGenerator,
	PromiseGenerator,
	LazyGenerator,
	ReadonlyGenerator,
	{
		schema: z.$ZodVoid,
		generator: () => {},
		match: "instanceof"
	},
	{
		schema: z.$ZodUndefined,
		generator: () => undefined,
		match: "instanceof"
	},
	{
		schema: z.$ZodNull,
		generator: () => null,
		match: "instanceof"
	},
	{
		schema: z.$ZodNaN,
		generator: () => NaN,
		match: "instanceof"
	},
	{
		schema: z.$ZodLiteral,
		generator: (schema: z.$ZodLiteral) => schema._zod.def.values[0],
		match: "instanceof"
	},
	{
		schema: z.$ZodNever,
		generator: () => void 0,
		match: "instanceof"
	},
	IntersectionGenerator
];
